package shogi

/**
 * <type><pos1>-<pos2><?+> - move wiht optional promotion
 * <type><pos1>x<pos2><?+> - capture with optional promotion
 * <type>*<pos> - drop
 *
 * +B4bx3c, N*4c
 *  p rb lnsgk
 * +?[prblnsgk][1-9][a-i][-x][1-9][a-i]
 *
 * */
object Move {
  val baseMove = """(\+?[prblnsgkPRBLNSGK])([1-9])([a-i])([-x])([1-9])([a-i])(\+?)""".r
  val dropMove = """([prblnsgkPRBLNSGK])\*([1-9])([a-i])""".r

  def apply(move: String, black: Boolean): Move = {
    def align(p: String, black: Boolean): String = if (black) p.toUpperCase else p.toLowerCase
    move match {
      case baseMove(piece, fcol, frow, op, tcol, trow, pr) =>
        Move(align(piece, black), fcol.toInt, frow(0).toInt - 'a'.toInt + 1, tcol.toInt, trow(0).toInt - 'a'.toInt + 1, op == "x", false, pr == "+")
      case dropMove(piece, tcol, trow) =>
        Move(align(piece, black), 0, 0, tcol.toInt, trow(0).toInt - 'a'.toInt + 1, false, true, false)

      case _ => throw new Exception(s"Wrong move: '${move}'")
    }
  }
}

case class Move(
  piece: String,
  fromCol: Int,
  fromRow: Int,
  toCol: Int,
  toRow: Int,
  isCapture: Boolean,
  isDrop: Boolean,
  withPromotion: Boolean
) {
  protected val ligal: Map[String, Set[(Int, Int)]] = Map(
    "p" -> Set((1, 0)),
    "r" -> Set((1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (-1, 0), (-2, 0), (-3, 0), (-4, 0), (-5, 0), (-6, 0), (-7, 0), (-8, 0), (0, -1), (0, -2), (0, -3), (0, -4), (0, -5), (0, -6), (0, -7), (0, -8)),
    "b" -> Set((1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (-1, 1), (-2, 2), (-3, 3), (-4, 4), (-5, 5), (-6, 6), (-7, 7), (-8, 8), (1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (7, -7), (8, -8), (-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7), (-8, -8)),
    "l" -> Set((1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)),
    "n" -> Set((2, -1), (2, 1)),
    "s" -> Set((1, -1), (1, 0), (1, 1), (-1, -1), (-1, 1)),
    "g" -> Set((1, -1), (1, 0), (1, 1), (0, -1), (0, 1), (-1, 0)),
    "k" -> Set((1, -1), (1, 0), (1, 1), (0, -1), (0, 1), (-1, -1), (-1, 0), (-1, 1)),
    "+p" -> Set((1, -1), (1, 0), (1, 1), (0, -1), (0, 1), (-1, -1), (-1, 0), (-1, 1)),
    "+r" -> Set((1, -1), (1, 1), (-1, -1), (-1, 1), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (-1, 0), (-2, 0), (-3, 0), (-4, 0), (-5, 0), (-6, 0), (-7, 0), (-8, 0), (0, -1), (0, -2), (0, -3), (0, -4), (0, -5), (0, -6), (0, -7), (0, -8)),
    "+b" -> Set((1, 0), (0, -1), (0, 1), (-1, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (-1, 1), (-2, 2), (-3, 3), (-4, 4), (-5, 5), (-6, 6), (-7, 7), (-8, 8), (1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (7, -7), (8, -8), (-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7), (-8, -8)),
    "+l" -> Set((1, -1), (1, 0), (1, 1), (0, -1), (0, 1), (-1, -1), (-1, 0), (-1, 1)),
    "+n" -> Set((1, -1), (1, 0), (1, 1), (0, -1), (0, 1), (-1, -1), (-1, 0), (-1, 1)),
    "+s" -> Set((1, -1), (1, 0), (1, 1), (0, -1), (0, 1), (-1, -1), (-1, 0), (-1, 1)),

    "P" -> Set((-1, 0)),
    "R" -> Set((1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (-1, 0), (-2, 0), (-3, 0), (-4, 0), (-5, 0), (-6, 0), (-7, 0), (-8, 0), (0, -1), (0, -2), (0, -3), (0, -4), (0, -5), (0, -6), (0, -7), (0, -8)),
    "B" -> Set((1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (-1, 1), (-2, 2), (-3, 3), (-4, 4), (-5, 5), (-6, 6), (-7, 7), (-8, 8), (1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (7, -7), (8, -8), (-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7), (-8, -8)),
    "L" -> Set((-1, 0), (-2, 0), (-3, 0), (-4, 0), (-5, 0), (-6, 0), (-7, 0), (-8, 0)),
    "N" -> Set((-2, -1), (-2, 1)),
    "S" -> Set((-1, -1), (-1, 0), (-1, 1), (1, -1), (1, 1)),
    "G" -> Set((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, 0)),
    "K" -> Set((1, -1), (1, 0), (1, 1), (0, -1), (0, 1), (-1, -1), (-1, 0), (-1, 1)),
    "+P" -> Set((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, 0)),
    "+R" -> Set((1, -1), (1, 1), (-1, -1), (-1, 1), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (-1, 0), (-2, 0), (-3, 0), (-4, 0), (-5, 0), (-6, 0), (-7, 0), (-8, 0), (0, -1), (0, -2), (0, -3), (0, -4), (0, -5), (0, -6), (0, -7), (0, -8)),
    "+B" -> Set((1, 0), (0, -1), (0, 1), (-1, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (-1, 1), (-2, 2), (-3, 3), (-4, 4), (-5, 5), (-6, 6), (-7, 7), (-8, 8), (1, -1), (2, -2), (3, -3), (4, -4), (5, -5), (6, -6), (7, -7), (8, -8), (-1, -1), (-2, -2), (-3, -3), (-4, -4), (-5, -5), (-6, -6), (-7, -7), (-8, -8)),
    "+L" -> Set((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, 0)),
    "+N" -> Set((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, 0)),
    "+S" -> Set((-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, 0))
  )

  def isLigal: Boolean = isDrop match {
    case true => true
    case false => ligal(piece).contains((toRow - fromRow, toCol - fromCol))
  }

}
